{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #the-canvas {
            border: 1px solid black;
            direction: ltr;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
{% endblock %}

{% block title %}Voir un contrat{% endblock %}

{% block body %}
<div class="d-flex justify-content-end position-fixed top-0 end-0 m-3">
    <a href="{{ path('app_liste_des_contrats' , { id : client.id , pathContratDansPublic: asset('storage/' ~ contrat.cheminFichier) }) }}">
        <img class="icon-page-precedente" src="{{ asset('assets/images/page_precedente.png') }}" alt="Icône non trouvé."></img>
    </a>
</div>

{% set pile = app.session.get('pile_de_pdf_dans_public', []) %}
<h3>Contenu de la pile PDF :</h3>
<ul>
    {% for path in pile %}
        <li>{{ path }}</li>
    {% else %}
        <li><em>(pile vide)</em></li>
    {% endfor %}
</ul>


{% if employe %}
{# <a href="{{ path( 'app_supprimer_un_contrat', { id: contrat.id } ) }}" class="btn btn-outline-light btn-sm mt-4">Supprimer</a> #}

<!-- Le formulaire POST caché -->
<form action="{{ path('app_supprimer_un_contrat', { 'id': contrat.id }) }}" method="POST" style="display: none;" id="deleteForm{{ contrat.id }}">
    <button type="submit" class="btn btn-danger">Supprimer</button>
    <!-- Token CSRF pour la sécurité -->
    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ contrat.id) }}">
</form>

<!-- Le lien de suppression avec un évènement de confirmation -->
<a href="#" class="btn btn-danger" onclick="showDeleteModal({{ contrat.id }}); return false;">Supprimer ce contrat</a>

<!-- Modal de confirmation (Bootstrap) -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirmation de suppression</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Êtes-vous sûr de vouloir supprimer ce contrat ? Cette action est irréversible.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" onclick="deleteContract();">Supprimer</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Fonction pour afficher le modal
    function showDeleteModal(contratId) {
        // Enregistre l'ID du contrat pour la suppression
        window.contractToDelete = contratId;
        // Affiche le modal Bootstrap
        const myModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        myModal.show();
    }

    // Fonction pour soumettre le formulaire de suppression
    function deleteContract() {
        const form = document.getElementById('deleteForm' + window.contractToDelete);
        form.submit(); // Soumet le formulaire
    }
</script>

{% endif %}

<a href="{{ path('app_afficher_fac') }}">FAC</a>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-6 col-lg-5 d-flex justify-content-center">
            <div class="card bg-transparent" style="width: 18rem;">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title mx-auto mb-3">{{client.prenom}} {{client.nom}}</h5>
                    <span class="card-text">Fixe : {{client.telephoneFixe}}</span>
                    <span class="card-text">Mobile : {{client.telephoneMobile}}</span>
                    <span class="card-text">{{client.rueEtNumero}}, {{client.codePostal}} {{client.ville}}</span>
                    <span class="card-text">Société : {{client.societe}}</span>
                    <br>
                    <span class="card-text">Contrat : {{contrat.numeroContrat}}</span>
                </div>
            </div>
            <ul>
                {% for etat in etatsSuccessifsSpecifiesPar %}
                    <li>{{ etat.etat.etat }} - spécifié par {{ etat.specifiePar.prenom }} {{ etat.specifiePar.nom }} le {{ etat.etat.dateHeureInsertion |format_datetime(locale='fr', pattern='EEEE d MMMM y à HH:mm') }}</li>
                {% endfor %}
            </ul>
        </div>
    </div>

    <strong> {{ contrat.cheminFichier|split('/')|last }} </strong><br>

    <div id="pdf-textlayer-container"></div>

    <a href="{{ path('app_liste_des_contrats', {
        id: client.id,
        pathContratDansPublic: asset('storage/' ~ contrat.cheminFichier)
    }) }}" class="btn btn-outline-light btn-sm mt-4">Retour</a>

    <div>
        <button id="prev" class='btn btn-outline-light btn-sm mb-1'>Précédente</button>
        <button id="next" class='btn btn-outline-light btn-sm mb-1'>Suivante</button>
        &nbsp; &nbsp;
        <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
    </div>
    <canvas id="the-canvas"></canvas>

    <script type="module">
        // If absolute URL from the remote server is provided, configure the CORS
        // header on that server.

        const url = "{{ asset('storage/' ~ contrat.cheminFichier) }}";

        // Loaded via <script> tag, create shortcut to access PDF.js exports.
        var { pdfjsLib } = globalThis;

        // The workerSrc property shall be specified.
        {# pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.mjs'; #}
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';


        var pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            scale = 1,
            canvas = document.getElementById('the-canvas'),
            ctx = canvas.getContext('2d');

        /**
        * Get page info from document, resize canvas accordingly, and render page.
        * @param num Page number.
        */
        function renderPage(num) {
            pageRendering = true;
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function(page) {
            var viewport = page.getViewport({scale: scale});
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            // Render PDF page into canvas context
            var renderContext = {
                canvasContext: ctx,
                viewport: viewport
            };
            var renderTask = page.render(renderContext);

            // Wait for rendering to finish
            renderTask.promise.then(function() {
                pageRendering = false;
                if (pageNumPending !== null) {
                // New page rendering is pending
                renderPage(pageNumPending);
                pageNumPending = null;
                }
            });
            });

            // Update page counters
            document.getElementById('page_num').textContent = num;
        }

        /**
        * If another page rendering in progress, waits until the rendering is
        * finised. Otherwise, executes rendering immediately.
        */
        function queueRenderPage(num) {
            if (pageRendering) {
            pageNumPending = num;
            } else {
            renderPage(num);
            }
        }

        /**
        * Displays previous page.
        */
        function onPrevPage() {
            if (pageNum <= 1) {
            return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }
        document.getElementById('prev').addEventListener('click', onPrevPage);

        /**
        * Displays next page.
        */
        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
            return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        }
        document.getElementById('next').addEventListener('click', onNextPage);

        /**
        * Asynchronously downloads PDF.
        */
        pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;

            // Initial/first page rendering
            renderPage(pageNum);
        });
  </script>

</div>

{% endblock %}
